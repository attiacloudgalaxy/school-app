name: CI/CD Pipeline

# This workflow builds, tests, and validates the School Management System
# For Docker Hub publishing, configure DOCKER_USERNAME and DOCKER_PASSWORD secrets
# See GITHUB-ACTIONS.md for complete setup instructions

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18.x'

jobs:
  # Job 1: Build and Test Backend API
  build-api:
    name: Build Backend API
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore SchoolApi/SchoolApi.csproj
      
    - name: Build API
      run: dotnet build SchoolApi/SchoolApi.csproj --configuration Release --no-restore
      
    - name: Run tests
      run: dotnet test SchoolApi/SchoolApi.csproj --no-build --verbosity normal --configuration Release
      continue-on-error: true
      
    - name: Publish API
      run: dotnet publish SchoolApi/SchoolApi.csproj --configuration Release --output ./api-publish
      
    - name: Upload API artifacts
      uses: actions/upload-artifact@v4
      with:
        name: api-build
        path: ./api-publish
        retention-days: 7

  # Job 2: Build Blazor Frontend
  build-frontend:
    name: Build Blazor Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore SchoolApp/SchoolApp.csproj
      
    - name: Build Frontend
      run: dotnet build SchoolApp/SchoolApp.csproj --configuration Release --no-restore
      
    - name: Publish Frontend
      run: dotnet publish SchoolApp/SchoolApp.csproj --configuration Release --output ./app-publish
      
    - name: Upload Frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: ./app-publish
        retention-days: 7

  # Job 3: Build Docker Images (Local Build Only)
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build-api, build-frontend]
    if: ${{ secrets.DOCKER_USERNAME != '' || github.event_name == 'pull_request' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      if: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      continue-on-error: true
      
    - name: Build API image (test build)
      uses: docker/build-push-action@v5
      with:
        context: ./SchoolApi
        file: ./SchoolApi/Dockerfile
        push: false
        tags: school-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build Frontend image (test build)
      uses: docker/build-push-action@v5
      with:
        context: ./SchoolApp
        file: ./SchoolApp/Dockerfile
        push: false
        tags: school-app:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 4: Code Quality Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: |
        dotnet restore SchoolApi/SchoolApi.csproj
        dotnet restore SchoolApp/SchoolApp.csproj
        
    - name: Build projects
      run: |
        dotnet build SchoolApi/SchoolApi.csproj --configuration Release --no-restore
        dotnet build SchoolApp/SchoolApp.csproj --configuration Release --no-restore
        
    - name: Run code analysis
      run: dotnet format --verify-no-changes --verbosity diagnostic
      continue-on-error: true

  # Job 5: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
        
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  # Job 6: Integration Tests with Docker Compose
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-api, build-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create .env file
      run: |
        echo "MYSQL_ROOT_PASSWORD=testpass" > .env
        echo "MYSQL_DATABASE=schooldb" >> .env
      working-directory: ./SchoolApi
        
    - name: Start services with Docker Compose
      run: docker compose up -d
      working-directory: ./SchoolApi
      
    - name: Wait for services to be healthy
      run: |
        echo "Waiting for services to start..."
        sleep 30
        docker compose ps
        echo "Checking MySQL health..."
        docker compose ps mysql | grep healthy || echo "MySQL not healthy yet"
      working-directory: ./SchoolApi
      
    - name: Check service logs
      if: failure()
      run: docker compose logs
      working-directory: ./SchoolApi
      
    - name: Test API health endpoint
      run: |
        echo "Testing API health endpoint..."
        for i in {1..10}; do
          if curl -f http://localhost:5178/health; then
            echo "✅ Health check passed"
            break
          fi
          echo "Attempt $i failed, retrying in 5 seconds..."
          sleep 5
        done
        
    - name: Test API endpoints
      run: |
        echo "Testing /api/classes endpoint..."
        curl -f http://localhost:5178/api/classes -v
        echo ""
        echo "Testing /api/students endpoint..."
        curl -f http://localhost:5178/api/students -v
        
    - name: Stop services
      run: docker compose down -v
      working-directory: ./SchoolApi
      if: always()

  # Job 7: Deploy notification
  deployment-status:
    name: Deployment Status
    runs-on: ubuntu-latest
    needs: [build-api, build-frontend, integration-test]
    if: always()
    
    steps:
    - name: Check deployment status
      run: |
        echo "## Deployment Status Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
        echo "- Backend API Build: ${{ needs.build-api.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend Build: ${{ needs.build-frontend.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ${{ needs.integration-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.build-api.result }}" == "success" ] && \
           [ "${{ needs.build-frontend.result }}" == "success" ] && \
           [ "${{ needs.integration-test.result }}" == "success" ]; then
          echo "✅ All builds and tests passed successfully!"
          echo "🚀 Ready for deployment"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Status**: All checks passed - Ready for deployment" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some jobs failed. Please check the logs."
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❌ **Status**: Some checks failed - Please review" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
