name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18.x'

jobs:
  # Job 1: Build and Test Backend API
  build-api:
    name: Build Backend API
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore SchoolApi/SchoolApi.csproj
      
    - name: Build API
      run: dotnet build SchoolApi/SchoolApi.csproj --configuration Release --no-restore
      
    - name: Run tests
      run: dotnet test SchoolApi/SchoolApi.csproj --no-build --verbosity normal --configuration Release
      continue-on-error: true
      
    - name: Publish API
      run: dotnet publish SchoolApi/SchoolApi.csproj --configuration Release --output ./api-publish
      
    - name: Upload API artifacts
      uses: actions/upload-artifact@v4
      with:
        name: api-build
        path: ./api-publish
        retention-days: 7

  # Job 2: Build Blazor Frontend
  build-frontend:
    name: Build Blazor Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore SchoolApp/SchoolApp.csproj
      
    - name: Build Frontend
      run: dotnet build SchoolApp/SchoolApp.csproj --configuration Release --no-restore
      
    - name: Publish Frontend
      run: dotnet publish SchoolApp/SchoolApp.csproj --configuration Release --output ./app-publish
      
    - name: Upload Frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: ./app-publish
        retention-days: 7

  # Job 3: Build Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build-api, build-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      continue-on-error: true
      
    - name: Extract metadata for API
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/school-api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
        
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: ./SchoolApi
        file: ./SchoolApi/Dockerfile
        push: ${{ secrets.DOCKER_USERNAME != '' }}
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Extract metadata for Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/school-app
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
        
    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./SchoolApp
        file: ./SchoolApp/Dockerfile
        push: ${{ secrets.DOCKER_USERNAME != '' }}
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 4: Code Quality Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: |
        dotnet restore SchoolApi/SchoolApi.csproj
        dotnet restore SchoolApp/SchoolApp.csproj
        
    - name: Build projects
      run: |
        dotnet build SchoolApi/SchoolApi.csproj --configuration Release --no-restore
        dotnet build SchoolApp/SchoolApp.csproj --configuration Release --no-restore
        
    - name: Run code analysis
      run: dotnet format --verify-no-changes --verbosity diagnostic
      continue-on-error: true

  # Job 5: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
        
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  # Job 6: Integration Tests with Docker Compose
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-api, build-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create .env file
      run: |
        echo "MYSQL_ROOT_PASSWORD=testpass" > .env
        echo "MYSQL_DATABASE=schooldb" >> .env
        
    - name: Start services with Docker Compose
      run: docker-compose up -d
      working-directory: ./SchoolApi
      
    - name: Wait for services to be healthy
      run: |
        timeout 60 bash -c 'until docker-compose ps | grep healthy; do sleep 2; done'
      working-directory: ./SchoolApi
      
    - name: Test API health endpoint
      run: |
        sleep 10
        curl -f http://localhost:5178/health || exit 1
        
    - name: Test API endpoints
      run: |
        curl -f http://localhost:5178/api/classes || exit 1
        curl -f http://localhost:5178/api/students || exit 1
        
    - name: Stop services
      run: docker-compose down -v
      working-directory: ./SchoolApi
      if: always()

  # Job 7: Deploy notification
  deployment-status:
    name: Deployment Status
    runs-on: ubuntu-latest
    needs: [build-api, build-frontend, build-docker, integration-test]
    if: always()
    
    steps:
    - name: Check deployment status
      run: |
        if [ "${{ needs.build-api.result }}" == "success" ] && \
           [ "${{ needs.build-frontend.result }}" == "success" ] && \
           [ "${{ needs.integration-test.result }}" == "success" ]; then
          echo "‚úÖ All builds and tests passed successfully!"
          echo "üöÄ Ready for deployment"
        else
          echo "‚ùå Some jobs failed. Please check the logs."
          exit 1
        fi
